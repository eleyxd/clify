#!/usr/bin/env ruby
# encoding: utf-8

require 'open3'
require 'curses'
require 'shellwords'
require 'json'

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
PLAYER = 'ffplay' 
PLAYER_ARGS = {
  # –î–æ–±–∞–≤–ª—è–µ–º -nostdin, —á—Ç–æ–±—ã ffplay –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–≤–æ–¥ Curses.
  'ffplay' => '-nodisp -autoexit'
}

# --- 1. –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –û –¢–†–ï–ö–ï ---

def get_track_data(track_url)
  puts "Waiting for stream data: #{track_url}..."
  # –î–æ–±–∞–≤–ª—è–µ–º -f bestaudio/best –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ URL SoundCloud
  command = "yt-dlp -f bestaudio/best --skip-download --print-json --no-playlist --no-warnings #{Shellwords.escape(track_url)}"
  stdout, stderr, status = Open3.capture3(command)
  
  unless status.success?
    puts "Error while getting data from yt-dlp:"
    puts stderr
    return nil
  end
  puts "DEBUG: stdout (first 200): #{stdout[0,200]}"
  
  begin
    data = JSON.parse(stdout)
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º || –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–∞
    stream_url = data['url'] || data['formats']&.first&.[]('url')
    artist = data['artist'] || data['uploader'] || "Unknown Artist"
    title = data['title'] || "Unknown title"
    track_title = "#{artist} - #{title}"
    
    return { stream_url: stream_url, track_title: track_title }
    
  rescue JSON::ParserError
    puts "Error JSON parsing from yt-dlp. Maybe, yt-dlp doest find track"
    return nil
  end
end

# --- 2. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–†–ò–°–û–í–ö–ò TUI (–î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø) ---

def redraw_window(win, track_title, player)
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Å–æ–ª–∏
    max_height = Curses.lines
    max_width  = Curses.cols
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ (95% —à–∏—Ä–∏–Ω—ã, –º–∏–Ω–∏–º—É–º 10 —Å—Ç—Ä–æ–∫)
    height = [10, max_height].min 
    width  = (max_width * 0.95).to_i
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
    start_row = (max_height - height) / 2
    start_col = (max_width - width) / 2
    
    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –æ–∫–Ω–æ (move –≤–º–µ—Å—Ç–æ mvwin)
    win.resize(height, width) 
    win.move(start_row, start_col) 
    
    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    win.clear
    # win.box() –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    win.box(0, 0)
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    max_title_length = width - 5 
    display_title = track_title
    if display_title.length > max_title_length
        display_title = display_title[0, max_title_length - 3] + "..."
    end

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    win.setpos(2, 2)
    win.addstr("üéµ PLAYING") 
    win.setpos(3, 2)
    win.addstr(display_title) 

    win.setpos(5, 2)
    win.addstr("Player: #{player}") 

    win.setpos(7, 2)
    win.addstr("Press Q or Ctrl+C to exit...") 
    
    win.refresh 
    Curses.doupdate
end

# --- 3. –§–£–ù–ö–¶–ò–Ø –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø (–° –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú) ---

def play_stream(stream_url, player, track_title)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–Ω–µ begin –¥–ª—è ensure
    win = nil 
    pid = nil

    unless player
      puts "Error: ffplay was not found."
      return
    end

    args = PLAYER_ARGS[player]
    player_command = "#{player} #{args} #{Shellwords.escape(stream_url)}"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –º–∞—Å—Å–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è Kernel#spawn
    cmd = Shellwords.split(player_command)
    
    begin
        # --- 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø Curses –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú –ü–õ–ï–ï–†–ê ---
        # –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É "–æ–∫–Ω–æ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è"
        Curses.init_screen
        Curses.noecho
        Curses.curs_set(0)
        Curses.stdscr.keypad(true)
        Curses.timeout = 100 # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤–≤–æ–¥
        
        win = Curses::Window.new(0, 0, 0, 0) 
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ SIGWINCH –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        Signal.trap('WINCH') do
            Curses.stdscr.resize(0, 0)
            redraw_window(win, track_title, player)
        end
        
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
        redraw_window(win, track_title, player)
        
        # --- 2. –ó–ê–ü–£–°–ö –ü–õ–ï–ï–†–ê –í –§–û–ù–û–í–û–ú –†–ï–ñ–ò–ú–ï (Kernel#spawn) ---
        # :out –∏ :err –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ /dev/null, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å Curses
        # :pgroup => true —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        pid = spawn(*cmd, :out => '/dev/null', :err => '/dev/null', :pgroup => true)
        
        # --- 3. –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –£–ü–†–ê–í–õ–ï–ù–ò–Ø ---
        loop do
            # –ü–†–û–í–ï–†–ö–ê –ñ–ò–ó–ù–ò –ü–†–û–¶–ï–°–°–ê
            begin
                # Process.waitpid –≤–µ—Ä–Ω–µ—Ç PID, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è.
                break unless Process.waitpid(pid, Process::WNOHANG).nil?
            rescue Errno::ECHILD
                break # –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –º–µ—Ä—Ç–≤ –∏ —Å–æ–±—Ä–∞–Ω.
            end
            
            key = Curses.getch
            
            case key
            when 'q', 'Q'
                # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –∏—Å–ø–æ–ª—å–∑—É—è PID
                Process.kill('TERM', pid)
                break
            end
            
            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ
            redraw_window(win, track_title, player)
        end

    rescue Interrupt
        nil
    ensure
        # --- 4. –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê ---
        
        # –£–±–∏–≤–∞–µ–º –ø–ª–µ–µ—Ä (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Errno::ESRCH)
        begin
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å, –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π —É–±–∏—Ç—å (Process.kill(0, pid))
            if pid && Process.kill(0, pid) 
                Process.kill('TERM', pid)
            end
        rescue Errno::ESRCH
        end
        
        Curses.close_screen if Curses.stdscr 
        puts "\n‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
    end
end

# --- 4. –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---

def main
  track_url = ARGV[0]
  if track_url.nil? || track_url.empty?
    puts "Using: #{$0} <URL track from the any site>"
    exit 1
  end

  track_data = get_track_data(track_url)
  
  if track_data && track_data[:stream_url]
    stream_url = track_data[:stream_url]
    track_title = track_data[:track_title]
    
    play_stream(stream_url, PLAYER, track_title)
  else
    puts "Error: no stream url"
  end
end

main
